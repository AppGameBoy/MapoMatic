#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.1 on Tue Apr 27 15:34:59 2021
#

import wx
import gmplot
from cefpython3 import cefpython as cef
import sys
import platform
import os
from wx.core import BLUE, HORIZONTAL, PRINTBIN_USER, TE_PROCESS_ENTER
import Route_generator
# import test 

builder = Route_generator.RouteBuilder()
Route_generator.RouteDirector(builder)



WINDOWS = (platform.system() == "Windows")
LINUX = (platform.system() == "Linux")
MAC = (platform.system() == "Darwin")

startLocation =''
endLocation=''
building=''

choices = ['Nigh University Center','Communications Building','Max Chambers Library','Math and Computer Science']

ucoBuildings = {
    'Nigh University Center' : (35.65572618535371, -97.47124943368546),
    "Communications Building": (35.657162786958885, -97.47134177810977),
    "Max Chambers Library" : (35.657965312633785, -97.47373031501483),
    "Math and Computer Science": (35.653997083277126, -97.47312997269954)

}
midDict = {
    "Nigh to Lib W" :zip(*[
        (35.65794235634459, -97.47360704924955),
        (35.65794128726414, -97.47331916781197),
        (35.65767540904128, -97.47332989664746),
        (35.65765797436592, -97.47120022274068),
        (35.65658347479419, -97.4712353441628),
        (35.656293440101, -97.47090501606355),
        (35.655598855156136, -97.47102941440974)
    ]),
    "Nigh to math W" :zip(*[ 
        (35.65563899390924, -97.47097476725821),
        (35.65430517303365, -97.47089231449681),
        (35.65439847734943, -97.47301027653971),
        (35.65397860707006, -97.47306131176967)
    ]),
    "Math to Lib W" : zip(*[
        (35.65397860707006, -97.47306131176967),
        (35.65439847734943, -97.47301027653971),
        (35.65434423565961, -97.4730719261411),
        (35.654684225115155, -97.47312020590076),
        (35.65479755461205, -97.47490119259025),
        (35.658211889572975, -97.47499775926565),
        (35.658160056330466, -97.47430240425761),
        (35.657921622981654, -97.47427688664263),
        (35.65794235634459, -97.47360704924955)
    ]),
    "Math to Nigh NW" : zip(*[
        (35.65425162157668, -97.47270851296994),
        (35.65436524716877, -97.4727581330868),
        (35.65438540653113, -97.47143192269081)
    ]),
    "Math to Lib NW" : zip(*[
        (35.65425162157668, -97.47270851296994),
        (35.65435004355568, -97.47307999503826),
        (35.65518257921023, -97.47313363921646),
        (35.65588870214999, -97.47356279265084),
        (35.65649892680413, -97.47348769080808),
        (35.65649892680413, -97.47312827481419),
        (35.65692608130799, -97.47323019877126),
        (35.657069918527384, -97.47349841966225),
        (35.6579634469659, -97.47362716568992)
    ]),
    "Lib to Nigh NW" : zip(*[
        (35.6579634469659, -97.47362716568992),
        (35.65765398215114, -97.47370226749302),
        (35.65764526481504, -97.47202856913336),
        (35.65650764428815, -97.47193200961262),
        (35.65449416993982, -97.47189018680612),
        (35.654359, -97.471431)
    ])
}

WIDTH = 900
HEIGHT = 700


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
apikey = 'AIzaSyDrGcqQdFJDsBWBEPkT7NoXFnTccHlTJ2U' # (your API key here)

def main():
    check_versions()
    sys.excepthook = cef.ExceptHook  # To shutdown all CEF processes on error
    settings = {}
    cef.DpiAware.EnableHighDpiSupport()
    cef.Initialize(settings=settings)
    app = CefApp(False)
    app.MainLoop()
    del app  # Must destroy before calling Shutdown

    cef.Shutdown()


def check_versions():
    print("[wxpython.py] CEF Python {ver}".format(ver=cef.__version__))
    print("[wxpython.py] Python {ver} {arch}".format(
            ver=platform.python_version(), arch=platform.architecture()[0]))
    print("[wxpython.py] wxPython {ver}".format(ver=wx.version()))
    # CEF Python version requirement
    assert cef.__version__ >= "66.0", "CEF Python v66.0+ required to run this"


def scale_window_size_for_high_dpi(width, height):
    """Scale window size for high DPI devices. This func can be
    called on all operating systems, but scales only for Windows.
    If scaled value is bigger than the work area on the display
    then it will be reduced."""
    if not WINDOWS:
        return width, height
    (_, _, max_width, max_height) = wx.GetClientDisplayRect().Get()
    # noinspection PyUnresolvedReferences
    (width, height) = cef.DpiAware.Scale((width, height))
    if width > max_width:
        width = max_width
    if height > max_height:
        height = max_height
    return width, height

class MainFrame(wx.Frame):
    def __init__(self):
        
        # begin wxGlade: MyFrame.__init__
        # startLocation =''
        # endLocation=''
        self.wheelChair=False
        
        if WINDOWS:
            # noinspection PyUnresolvedReferences, PyArgumentList
            print("[wxpython.py] System DPI settings: %s"
                  % str(cef.DpiAware.GetSystemDpi()))
        if hasattr(wx, "GetDisplayPPI"):
            print("[wxpython.py] wx.GetDisplayPPI = %s" % wx.GetDisplayPPI())
        print("[wxpython.py] wx.GetDisplaySize = %s" % wx.GetDisplaySize())

        print("[wxpython.py] MainFrame declared size: %s"
              % str((WIDTH, HEIGHT)))
        size = scale_window_size_for_high_dpi(WIDTH, HEIGHT)
        print("[wxpython.py] MainFrame DPI scaled size: %s" % str(size))
        




        wx.Frame.__init__(self,parent=None, id=wx.ID_ANY, size=size)
        print("[wxpython.py] MainFrame actual size: %s" % self.GetSize())
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.SetSize((1000, 500))
        self.SetTitle("Mapomatic")

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "Start Location")
        sizer_2.Add(label_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.TOP, 10)

        self.text_ctrl_ = wx.SearchCtrl(self.panel_1,style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_.ShowCancelButton(True)
        self.text_ctrl_.AutoComplete(choices)
        self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.on_enter, self.text_ctrl_)
        
        
        sizer_2.Add(self.text_ctrl_, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 10)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "End location\n")
        sizer_2.Add(label_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.text_ctrl_2 = wx.SearchCtrl(self.panel_1, wx.ID_ANY, "")
        self.text_ctrl_2.ShowCancelButton(True)
        self.text_ctrl_2.AutoComplete(choices)
        self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.on_enter, self.text_ctrl_2)
        

        sizer_2.Add(self.text_ctrl_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 10)

        

        self.checkbox_1 = wx.CheckBox(self.panel_1, wx.ID_ANY, "Wheel Chair Access")
        sizer_2.Add(self.checkbox_1, 0, 0, 0)
        self.Bind(wx.EVT_CHECKBOX, self.on_checked, self.checkbox_1)


        self.button_Submit = wx.Button(self.panel_1, wx.ID_ANY, "Submit")
        self.Bind(wx.EVT_BUTTON, self.on_button_pressed, self.button_Submit)
        sizer_2.Add(self.button_Submit, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)


        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Singular Building Search\n")
        sizer_2.Add(label_3, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 11)

        self.text_ctrl__copy = wx.SearchCtrl(self.panel_1, wx.ID_ANY, "")
        self.text_ctrl__copy.ShowCancelButton(True)
        self.text_ctrl__copy.AutoComplete(choices)

        sizer_2.Add(self.text_ctrl__copy, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 10)
        self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.on_Search_Enter, self.text_ctrl__copy)
        
        self.browser_panel = wx.Panel(self.panel_1, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.browser_panel.SetMinSize((1000, 400))
        self.browser_panel.Bind(wx.EVT_SET_FOCUS, self.OnSetFocus)
        self.browser_panel.Bind(wx.EVT_SIZE, self.OnSize)
        
        self.embed2()
    
        sizer_1.Add(self.browser_panel, 1, wx.EXPAND, 0)
        
        

        
        self.panel_1.SetSizer(sizer_1)
        
        
        
        
        
        
        self.Show()
        self.Layout()
        # end wxGlade

    def on_Search_Enter(self, event):  # wxGlade: MyFrame.<event_handler>
        self.set_building(self.text_ctrl__copy.GetValue())
        ucoBUilding = self.get_building()
        self.embed3(ucoBuildings[ucoBUilding])
        
        
    def on_button_pressed(self, event):  # wxGlade: MyFrame.<event_handler>
        
        self.set_Start(self.text_ctrl_.GetValue())
        self.set_End(self.text_ctrl_2.GetValue())
        start= self.get_Start()
        end=self.get_End()
        
       
        
        if start in ucoBuildings:
            print(start)
            print(ucoBuildings[start])
        
        if end in ucoBuildings:
            print(end)
            print(ucoBuildings[end])

            

        self.embed_browser(ucoBuildings[start][0],ucoBuildings[end][0],ucoBuildings[start][1],ucoBuildings[end][1])
        event.Skip()


    def on_checked(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Wheel Chair Access")
        self.wheelChair= True


        event.Skip()
   
    def on_enter(self, event):  # wxGlade: MyFrame.<event_handler>
        
        wx.Frame.Refresh(self.browser_panel.GetHandle())
        self.set_Start(self.text_ctrl_.GetValue())
        self.set_End(self.text_ctrl_2.GetValue())
        start= self.get_Start()
        end=self.get_End()
 
       
        
        if start in ucoBuildings:
            print(start)
            print(ucoBuildings[start])
        
        if end in ucoBuildings:
            print(end)
            print(ucoBuildings[end])

            

        
        self.embed_browser(ucoBuildings[start][0],ucoBuildings[end][0],ucoBuildings[start][1],ucoBuildings[end][1])
        

        
        
        event.Skip()

    #----browser stuff-----------------------------------------------------------------------------------------------------------
    def embed_browser(self,start_lat,end_lat,start_lng,end_lng):
        
        
        #Gmplot
        if self.wheelChair is False:
            print('wheel chair = false')
        else:
            print('wheel chair = true')

        print(start_lat,end_lat,start_lng,end_lng)
        lat=[start_lat,end_lat]
        lng=[start_lng,end_lng]
        if self.wheelChair is True:
            if ((lat[0] is 35.65572618535371 and lng[0] is -97.47124943368546) and (lat[1] is 35.657965312633785 and lng[1] is  -97.47373031501483)) or ((lat[0] is 35.657965312633785 and lng[0] is  -97.47373031501483)and (lat[1] is 35.65572618535371 and lng[1] is -97.47124943368546))  :
                #-----------------nigh to lib----------------------
                path = midDict['Nigh to Lib W']
                   
            elif ((lat[0] is 35.653997083277126 and lng[0] is  -97.47312997269954) and (lat[1] is 35.657965312633785 and lng[1] is  -97.47373031501483)) or ((lat[1] is 35.653997083277126 and lng[1] is  -97.47312997269954) and (lat[0] is 35.657965312633785 and lng[0] is  -97.47373031501483)):
                #------------------math to lib----------------------
                 path = midDict["Math to Lib W"]
                        # zip(*[
                #     (35.65397860707006, -97.47306131176967),
                #     (35.65439847734943, -97.47301027653971),
                #     (35.65434423565961, -97.4730719261411),
                #     (35.654684225115155, -97.47312020590076),
                #     (35.65479755461205, -97.47490119259025),
                #     (35.658211889572975, -97.47499775926565),
                #     (35.658160056330466, -97.47430240425761),
                #     (35.657921622981654, -97.47427688664263),
                #     (35.65794235634459, -97.47360704924955)
                # ])   
            elif ((lat[0] is 35.653997083277126 and lng[0] is  -97.47312997269954) and (lat[1] is 35.65572618535371 and lng[1] is   -97.47124943368546)) or ((lat[0] is 35.65572618535371 and lng[0] is  -97.47124943368546) and (lat[1] is 35.653997083277126 and lng[1] is  -97.47312997269954)):
                #-------------math to nigh-----------------------------
                path = midDict["Nigh to math W"]
                #     zip(*[
                #     (35.65563899390924, -97.47097476725821),
                #     (35.65430517303365, -97.47089231449681),
                #     (35.65439847734943, -97.47301027653971),
                #     (35.65397860707006, -97.47306131176967) 
                # ]) 
        else:
            if ((lat[0] is 35.65572618535371 and lng[0] is -97.47124943368546) and (lat[1] is 35.657965312633785 and lng[1] is  -97.47373031501483)) or ((lat[0] is 35.657965312633785 and lng[0] is  -97.47373031501483)and (lat[1] is 35.65572618535371 and lng[1] is -97.47124943368546))  :
                #-----------------nigh to lib no wheelie----------------------
                path = midDict["Lib to Nigh NW"]
                #     zip(*[
                #     (35.6579634469659, -97.47362716568992),
                #     (35.65765398215114, -97.47370226749302),
                #     (35.65764526481504, -97.47202856913336),
                #     (35.65650764428815, -97.47193200961262),
                #     (35.65449416993982, -97.47189018680612),
                #     (35.654359, -97.471431)
                # ])   

            elif ((lat[0] is 35.653997083277126 and lng[0] is  -97.47312997269954) and (lat[1] is 35.657965312633785 and lng[1] is  -97.47373031501483)) or ((lat[1] is 35.653997083277126 and lng[1] is  -97.47312997269954) and (lat[0] is 35.657965312633785 and lng[0] is  -97.47373031501483)):
                #------------------math to lib no wheelie----------------------
                path = midDict["Math to Lib NW"]
                #     zip(*[
                #     (35.65425162157668, -97.47270851296994),
                #     (35.65435004355568, -97.47307999503826),
                #     (35.65518257921023, -97.47313363921646),
                #     (35.65588870214999, -97.47356279265084),
                #     (35.65649892680413, -97.47348769080808),
                #     (35.65649892680413, -97.47312827481419),
                #     (35.65692608130799, -97.47323019877126),
                #     (35.657069918527384, -97.47349841966225),
                #     (35.6579634469659, -97.47362716568992)
                # ])   
            elif ((lat[0] is 35.653997083277126 and lng[0] is  -97.47312997269954) and (lat[1] is 35.65572618535371 and lng[1] is -97.47124943368546)) or ((lat[0] is 35.65572618535371 and lng[0] is  -97.47124943368546) and (lat[1] is 35.653997083277126 and lng[1] is  -97.47312997269954)):
                #-------------math to nigh no wheelie-----------------------------
                path = midDict["Math to Nigh NW"]
                #     zip(*[
                #     (35.65425162157668, -97.47270851296994),
                #     (35.65436524716877, -97.4727581330868),
                #     (35.65438540653113, -97.47143192269081)
                # ])   





        gmap = gmplot.GoogleMapPlotter.from_geocode('100 N University Dr, Edmond, OK 73034',17, apikey=apikey)
        gmap.scatter(lat,lng,color=['blue', 'orange'])
        gmap.plot(*path,edge_width=7)
        gmap.draw("map.html")
        
        window_info = cef.WindowInfo()
        (width, height) = self.browser_panel.GetClientSize().Get()
        assert self.browser_panel.GetHandle(), "Window handle not available"
        window_info.SetAsPopup(self.browser_panel.GetHandle(),
                              [0, 0, width, height])
        
        self.browser = cef.CreateBrowserSync(window_info, url="file:///C:/Users/ninte/Documents/School/Software%20I/Project/map.html")
        
        self.browser.SetClientHandler(FocusHandler())

    def embed2(self):
        gmap = gmplot.GoogleMapPlotter.from_geocode('100 N University Dr, Edmond, OK 73034',16, apikey=apikey)
        gmap.draw("map.html")

        window_info = cef.WindowInfo()
        (width, height) = self.browser_panel.GetClientSize().Get()
        assert self.browser_panel.GetHandle(), "Window handle not available"
        window_info.SetAsChild(self.browser_panel.GetHandle(),
                               [0, 0, width, height])
        self.browser = cef.CreateBrowserSync(window_info, url="file:///C:/Users/ninte/Documents/School/Software%20I/Project/map.html")
        
        self.browser.SetClientHandler(FocusHandler())
    def embed3(self,building):
        gmap = gmplot.GoogleMapPlotter.from_geocode(building,19, apikey=apikey)

        if building is (35.65572618535371, -97.47124943368546):
            print('nigh')
            gmap.marker(building[0],building[1],color='blue',title='Nigh University Center',label='N',info_window="<a href='https://www.uco.edu/'>UCO Website</a>")
        elif building is (35.657965312633785, -97.47373031501483):
            gmap.marker(building[0],building[1],color='red',title='Max Chambers Library',label='L',info_window="<a href='https://www.uco.edu/'>UCO Website</a>")
        else:
            gmap.marker(building[0],building[1],color='green',title='Max Chambers Library',label='M',info_window="<a href='https://www.uco.edu/'>UCO Website</a>")

        print(building)
        
        # gmap.marker(building[0],building[1],color='blue',title=ucoBuildings.keys(),label='N',info_window="<a href='https://www.uco.edu/'>UCO Website</a>")
        
        
        gmap.draw("map.html")

        window_info = cef.WindowInfo()
        (width, height) = self.browser_panel.GetClientSize().Get()
        assert self.browser_panel.GetHandle(), "Window handle not available"
        window_info.SetAsPopup(self.browser_panel.GetHandle(),
                               [0, 0, width, height])
        self.browser = cef.CreateBrowserSync(window_info, url="file:///C:/Users/ninte/Documents/School/Software%20I/Project/map.html")
        
        self.browser.SetClientHandler(FocusHandler())
        pass

        
        

        

    def get_building(self):
        return self.building
    def set_building(self,building):
        self.building= building
    def get_Start(self):
        return self.startLocation
    def set_Start(self,x):
        self.startLocation = x
    def get_End(self):
        return self.endLocation
    def set_End(self,x):
        self.endLocation = x
    
    
    


    def OnSetFocus(self, _):
        
        cef.WindowUtils.OnSetFocus(self.browser_panel.GetHandle(),
                                       0, 0, 0)
        self.browser.SetFocus(True)
     

    def OnSize(self, _):
        cef.WindowUtils.OnSize(self.browser_panel.GetHandle(),
                                   0, 0, 0)
    
        self.browser.NotifyMoveOrResizeStarted()

    def OnClose(self, event):
        print("[wxpython.py] OnClose called")
        
        self.browser.ParentWindowWillClose()
        event.Skip()
        self.clear_browser_references()



    def OnClose(self, event):
        print("[wxpython.py] OnClose called")
        if not self.browser:
            # May already be closing, may be called multiple times on Mac
            return
        self.browser.ParentWindowWillClose()
        event.Skip()
        self.clear_browser_references()
    def clear_browser_references(self):
        # Clear browser references that you keep anywhere in your
        # code. All references must be cleared for CEF to shutdown cleanly.
        self.browser = None

# end of class MyFrame
class FocusHandler(object):
    def OnGotFocus(self, browser, **_):
        # Temporary fix for focus issues on Linux (Issue #284).
        if LINUX:
            print("[wxpython.py] FocusHandler.OnGotFocus:"
                  " keyboard focus fix (Issue #284)")
            browser.SetFocus(True)
class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True
class CefApp(wx.App):

    def __init__(self, redirect):
        self.timer = None
        self.timer_id = 1
        self.is_initialized = False
        super(CefApp, self).__init__(redirect=redirect)

    def OnPreInit(self):
        super(CefApp, self).OnPreInit()
        # On Mac with wxPython 4.0 the OnInit() event never gets
        # called. Doing wx window creation in OnPreInit() seems to
        # resolve the problem (Issue #350).
        if MAC and wx.version().startswith("4."):
            print("[wxpython.py] OnPreInit: initialize here"
                  " (wxPython 4.0 fix)")
            self.initialize()

    def OnInit(self):
        self.initialize()
        return True

    def initialize(self):
        if self.is_initialized:
            return
        self.is_initialized = True
        self.create_timer()
        frame = MainFrame()
        self.SetTopWindow(frame)
        frame.Show()

    def create_timer(self):
        # See also "Making a render loop":
        # http://wiki.wxwidgets.org/Making_a_render_loop
        # Another way would be to use EVT_IDLE in MainFrame.
        self.timer = wx.Timer(self, self.timer_id)
        self.Bind(wx.EVT_TIMER, self.on_timer, self.timer)
        self.timer.Start(10)  # 10ms timer

    def on_timer(self, _):
        cef.MessageLoopWork()

    def OnExit(self):
        self.timer.Stop()
        return 0
# end of class MyApp

if __name__ == "__main__":
    main()

